image: node:20-alpine

stages:
  - test
  - build
  - test_docker
  - deploy


# Tests unitaires front
test_front:
  stage: test
  script:
    - cd projet-blog/front
    - npm install
    - npm run test
  coverage: '/Statements\s+:\s(\d+.?\d*)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: projet-blog/front/coverage/cobertura-coverage.xml


# Build et push vers la registry
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE/projet-blog-front:latest \
        --tag $CI_REGISTRY_IMAGE/projet-blog-front:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE/projet-blog-front:latest \
        -f projet-blog/front/Dockerfile ./projet-blog/front
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE/projet-blog-server:latest \
        --tag $CI_REGISTRY_IMAGE/projet-blog-server:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE/projet-blog-server:latest \
        -f projet-blog/server/Dockerfile ./projet-blog/server
    - docker push $CI_REGISTRY_IMAGE/projet-blog-front:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/projet-blog-front:latest
    - docker push $CI_REGISTRY_IMAGE/projet-blog-server:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/projet-blog-server:latest

# Test de sécurité
test_security:
  stage: test_docker
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run --rm aquasec/trivy:latest image $CI_REGISTRY_IMAGE/projet-blog-front:$CI_COMMIT_SHA
    - docker run --rm aquasec/trivy:latest image $CI_REGISTRY_IMAGE/projet-blog-server:$CI_COMMIT_SHA

# Déploiement des conteneurs
deploy_prod:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - apk add --no-cache docker-compose
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd projet-blog
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml up -d
    - echo "Waiting for services to start..."
    - sleep 30
    - docker ps
    - docker-compose -f docker-compose.prod.yml logs db
    - docker-compose -f docker-compose.prod.yml logs server
    - docker exec projet-blog-db-1 mysql -uuser -ppassword blog -e "SHOW TABLES;"
